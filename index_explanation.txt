1. document.getElementById('filtroForm').addEventListener('submit', async function(e) {
   - Seleziona il modulo con ID "filtroForm" e aggiunge un listener per l'evento "submit".
   - Quando il modulo viene inviato, esegue una funzione asincrona.

2. e.preventDefault();
   - Previene il comportamento predefinito del modulo (ricaricare la pagina).

3. const formData = new FormData(this);
   - Crea un oggetto FormData per raccogliere i dati del modulo.

4. const data = Object.fromEntries(formData.entries());
   - Converte i dati del modulo in un oggetto JavaScript.

5. const response = await fetch('/filtra_auto', {
   - Invia una richiesta HTTP POST all'endpoint "/filtra_auto".

6. method: 'POST',
   - Specifica che la richiesta Ã¨ di tipo POST.

7. headers: { 'Content-Type': 'application/json' },
   - Imposta l'intestazione per indicare che i dati inviati sono in formato JSON.

8. body: JSON.stringify(data)
   - Converte l'oggetto "data" in una stringa JSON e lo invia come corpo della richiesta.

9. });
   - Chiude l'oggetto delle opzioni della richiesta fetch.

10. const auto = await response.json();
    - Converte la risposta del server in formato JSON e la assegna alla variabile "auto".

11. const risultatiTabella = document.getElementById('risultatiTabella');
    - Seleziona l'elemento della tabella con ID "risultatiTabella".

12. risultatiTabella.innerHTML = auto.map(a => `
    - Usa il metodo map per creare una riga HTML per ogni elemento dell'array "auto".

13. <tr>
    - Inizia una nuova riga della tabella.

14. <td>${a.marca}</td>
    - Inserisce la marca dell'auto nella cella.

15. <td>${a.modello}</td>
    - Inserisce il modello dell'auto nella cella.

16. <td>${a.motore}</td>
    - Inserisce il tipo di motore dell'auto nella cella.

17. <td>${a.colore}</td>
    - Inserisce il colore dell'auto nella cella.

18. <td><img src="${a.immagine}" width="100" alt="Immagine auto"></td>
    - Inserisce un'immagine dell'auto con larghezza 100px e un testo alternativo.

19. </tr>
    - Chiude la riga della tabella.

20. `).join('');
    - Unisce tutte le righe generate in una singola stringa HTML.

21. });
    - Chiude la funzione del listener.

22. {% for a in auto %}
    - Inizia un ciclo `for` in Jinja2 per iterare sulla lista delle auto passata dal server.

23. <tr>
    - Crea una nuova riga nella tabella per ogni auto.

24. <td>{{ a.marca }}</td>
    - Inserisce la marca dell'auto nella cella utilizzando la variabile `a.marca`.

25. <td>{{ a.modello }}</td>
    - Inserisce il modello dell'auto nella cella utilizzando la variabile `a.modello`.

26. <td>{{ a.motore }}</td>
    - Inserisce il tipo di motore dell'auto nella cella utilizzando la variabile `a.motore`.

27. <td>{{ a.colore }}</td>
    - Inserisce il colore dell'auto nella cella utilizzando la variabile `a.colore`.

28. <td><img src="{{ a.immagine }}" width="100" alt="Immagine auto"></td>
    - Inserisce un'immagine dell'auto con larghezza 100px e un testo alternativo.

29. </tr>
    - Chiude la riga della tabella.

30. {% endfor %}
    - Termina il ciclo `for` in Jinja2.
